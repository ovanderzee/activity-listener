{"version":3,"file":"activityListener.js","sources":["../src/activityListener.js"],"sourcesContent":["const activityListener = (function () {\n    // internal state; isRunning - Boolean\n    let isRunning = true\n    const defaultDoneDelay = 50\n    const aheadOptions = { passive: true, capture: true }\n    const doneOptions = { passive: true, capture: false }\n    // lookup, wrapped callback by eventType\n    const registry = {}\n    // currently present events\n    const presence = {}\n\n    /**\n     * Execute callback with checks\n     * @private\n     * @param {Function} callback\n     * @param {Number} delay\n     * @param {Event} event\n     */\n    const execute = function (callback, delay, event) {\n        if (!isRunning) {\n            return\n        }\n        const tryCatch = function () {\n            try {\n                callback(event)\n            } catch (error) {\n                console.error('activityListener caught faulty callback')\n            }\n        }\n        if (!delay) {\n            tryCatch()\n        } else {\n            setTimeout(tryCatch, delay)\n        }\n    }\n\n    /**\n     * Setup tracker for event, in case of done handler.\n     * @private\n     * @param {String} type - eventType\n     * @param {Function} procedure - wrapped callback\n     * @param {Number} doneDelay - milliseconds to allow regular event-handler to finish\n     * @return {Function} stackSpareDoneFunction - function containing doneFunction\n     */\n    const trackEventPropagation = function (type, procedure, doneDelay) {\n        /**\n         * Stack execution of done handler, in case stopPropagation was called earlier.\n         * @private\n         * @param {Event} event\n         */\n        const stackDoneTimer = function (event) {\n            const presenceId = `${event.type}-${event.timeStamp}`\n            const timerId = setTimeout(function () {\n                if (presence[presenceId]) {\n                    procedure(event)\n                }\n            }, doneDelay + defaultDoneDelay / 2)\n            presence[presenceId] = timerId\n        }\n        eventHandling('add', type, stackDoneTimer, aheadOptions)\n        return stackDoneTimer\n    }\n\n    /**\n     * Clear stacked execution of done handler.\n     * @private\n     * @param {Event} event\n     */\n    const clearDoneTimer = function (event) {\n        const presenceId = `${event.type}-${event.timeStamp}`\n        if (presence[presenceId]) {\n            clearTimeout(presence[presenceId])\n            delete presence[presenceId]\n        }\n    }\n\n    /**\n     * Add or remove EventListeners\n     * @private\n     * @param {String} aim - 'add' | 'remove'\n     * @param {String} type - eventType\n     * @param {Function} callback - external function to call in case of event\n     * @param {Object} options - options responding to an event\n     */\n    const eventHandling = function (aim, type, callback, options) {\n        const handler = `on${type}`\n        if (handler in window) {\n            window[aim + 'EventListener'](type, callback, options)\n        } else if (handler in document) {\n            document[aim + 'EventListener'](type, callback, options)\n        } else if (aim === 'add') {\n            console.warn(`activityListener rejected ${type}-event`)\n        }\n    }\n\n    /**\n     * Attach callback to event.\n     * @param {String} type - event type to watch\n     * @param {Function} ahead - to execute first\n     * @param {Function} done - to execute after all\n     * @param {Number} doneDelay - milliseconds to allow regular event-handler to finish\n     */\n    const register = function (\n        type,\n        ahead,\n        done,\n        doneDelay = defaultDoneDelay,\n    ) {\n        const enroll = function (callback, options, delay) {\n            const procedure = function (event) {\n                clearDoneTimer(event)\n                execute(callback, delay, event)\n            }\n\n            if (!registry[type]) {\n                registry[type] = new Map()\n            }\n            const callData = {\n                procedure: procedure,\n                options: options,\n            }\n            eventHandling('add', type, procedure, options)\n\n            if (options.capture === false) {\n                callData.timer = trackEventPropagation(\n                    type,\n                    procedure,\n                    doneDelay,\n                )\n            }\n\n            registry[type].set(callback, callData)\n        }\n        if (ahead) {\n            enroll(ahead, aheadOptions, 0)\n        }\n        if (done) {\n            enroll(done, doneOptions, doneDelay)\n        }\n    }\n\n    /**\n     * Detach event/callback pair.\n     * @param {String} type - event type to watch\n     * @param {Function} callback\n     */\n    const erase = function (type, callback) {\n        const procedure = registry[type].get(callback).procedure\n        const options = registry[type].get(callback).options\n        eventHandling('remove', type, procedure, options)\n\n        const timer = registry[type].get(callback).timer\n        eventHandling('remove', type, timer, aheadOptions)\n\n        registry[type].delete(callback)\n        if (!registry[type].size) {\n            delete registry[type]\n        }\n    }\n\n    /**\n     * Erase all callbacks, without knowing them :-)\n     */\n    const destroy = function () {\n        Object.keys(registry).forEach((type) => {\n            for (let key of registry[type].keys()) {\n                erase(type, key)\n            }\n        })\n    }\n\n    /**\n     * Expose callbacks\n     */\n    const resume = function () {\n        isRunning = true\n    }\n\n    /**\n     * Block callbacks\n     */\n    const pause = function () {\n        isRunning = false\n    }\n\n    return {\n        clear: destroy, // deprecated\n        destroy: destroy,\n        erase: erase,\n        pause: pause,\n        register: register,\n        resume: resume,\n    }\n})()\n\nexport { activityListener }\n"],"names":["isRunning","aheadOptions","passive","capture","doneOptions","registry","presence","eventHandling","aim","type","callback","options","handler","window","document","console","warn","erase","procedure","get","timer","delete","size","destroy","Object","keys","forEach","key","clear","pause","register","ahead","done","doneDelay","enroll","delay","event","presenceId","timeStamp","clearTimeout","clearDoneTimer","tryCatch","error","setTimeout","execute","Map","callData","stackDoneTimer","timerId","defaultDoneDelay","trackEventPropagation","set","resume"],"mappings":"wPAAyB,WAErB,IAAIA,GAAY,EAChB,MACMC,EAAe,CAAEC,SAAS,EAAMC,SAAS,GACzCC,EAAc,CAAEF,SAAS,EAAMC,SAAS,GAExCE,EAAW,GAEXC,EAAW,GA2EXC,EAAgB,SAAUC,EAAKC,EAAMC,EAAUC,GACjD,MAAMC,EAAU,KAAKH,IACjBG,KAAWC,OACXA,OAAOL,EAAM,iBAAiBC,EAAMC,EAAUC,GACvCC,KAAWE,SAClBA,SAASN,EAAM,iBAAiBC,EAAMC,EAAUC,GACjC,QAARH,GACPO,QAAQC,KAAK,6BAA6BP,YAuD5CQ,EAAQ,SAAUR,EAAMC,GAC1B,MAAMQ,EAAYb,EAASI,GAAMU,IAAIT,GAAUQ,UACzCP,EAAUN,EAASI,GAAMU,IAAIT,GAAUC,QAC7CJ,EAAc,SAAUE,EAAMS,EAAWP,GAEzC,MAAMS,EAAQf,EAASI,GAAMU,IAAIT,GAAUU,MAC3Cb,EAAc,SAAUE,EAAMW,EAAOnB,GAErCI,EAASI,GAAMY,OAAOX,GACjBL,EAASI,GAAMa,aACTjB,EAASI,IAOlBc,EAAU,WACZC,OAAOC,KAAKpB,GAAUqB,SAASjB,IAC3B,IAAK,IAAIkB,KAAOtB,EAASI,GAAMgB,OAC3BR,EAAMR,EAAMkB,OAmBxB,MAAO,CACHC,MAAOL,EACPA,QAASA,EACTN,MAAOA,EACPY,MARU,WACV7B,GAAY,GAQZ8B,SAxFa,SACbrB,EACAsB,EACAC,EACAC,EAvGqB,IAyGrB,MAAMC,EAAS,SAAUxB,EAAUC,EAASwB,GACxC,MAAMjB,EAAY,SAAUkB,IAzCb,SAAUA,GAC7B,MAAMC,EAAa,GAAGD,EAAM3B,QAAQ2B,EAAME,YACtChC,EAAS+B,KACTE,aAAajC,EAAS+B,WACf/B,EAAS+B,IAsCZG,CAAeJ,GA5FX,SAAU1B,EAAUyB,EAAOC,GACvC,IAAKpC,EACD,OAEJ,MAAMyC,EAAW,WACb,IACI/B,EAAS0B,GACX,MAAOM,GACL3B,QAAQ2B,MAAM,6CAGjBP,EAGDQ,WAAWF,EAAUN,GAFrBM,IAiFIG,CAAQlC,EAAUyB,EAAOC,IAGxB/B,EAASI,KACVJ,EAASI,GAAQ,IAAIoC,KAEzB,MAAMC,EAAW,CACb5B,UAAWA,EACXP,QAASA,GAEbJ,EAAc,MAAOE,EAAMS,EAAWP,IAEd,IAApBA,EAAQR,UACR2C,EAAS1B,MAhFS,SAAUX,EAAMS,EAAWe,GAMrD,MAAMc,EAAiB,SAAUX,GAC7B,MAAMC,EAAa,GAAGD,EAAM3B,QAAQ2B,EAAME,YACpCU,EAAUL,YAAW,WACnBrC,EAAS+B,IACTnB,EAAUkB,KAEfH,EAAYgB,IACf3C,EAAS+B,GAAcW,GAG3B,OADAzC,EAAc,MAAOE,EAAMsC,EAAgB9C,GACpC8C,EAgEkBG,CACbzC,EACAS,EACAe,IAIR5B,EAASI,GAAM0C,IAAIzC,EAAUoC,IAE7Bf,GACAG,EAAOH,EAAO9B,EAAc,GAE5B+B,GACAE,EAAOF,EAAM5B,EAAa6B,IAsD9BmB,OAjBW,WACXpD,GAAY,IA/KK"}