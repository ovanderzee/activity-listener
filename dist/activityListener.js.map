{"version":3,"file":"activityListener.js","sources":["../src/activityListener.js"],"sourcesContent":["const activityListener = (function () {\n    /**\n     * Add or remove EventListeners\n     * @private\n     * @param {String} aim - 'add' | 'remove'\n     * @param {String} type - eventType\n     * @param {Function} callback - external function to call in case of event\n     */\n    const eventHandling = function (aim, type, callback) {\n        const eventOptions = { passive: true, capture: true }\n        const handler = `on${type}`\n        if (handler in window) {\n            window[aim + 'EventListener'](type, callback, eventOptions)\n        } else if (handler in document) {\n            document[aim + 'EventListener'](type, callback, eventOptions)\n        } else if (aim === 'add') {\n            console.warn(`activityListener rejected ${type}-event`)\n        }\n    }\n\n    /**\n     * Attach callback to event.\n     * @param {String} type - event type to watch\n     * @param {Function} callback\n     */\n    const register = function (type, callback) {\n        eventHandling('add', type, callback)\n    }\n\n    /**\n     * Detach event/callback pair.\n     * @param {String} type - event type to watch\n     * @param {Function} callback\n     */\n    const erase = function (type, callback) {\n        eventHandling('remove', type, callback)\n    }\n\n    return {\n        erase: erase,\n        register: register,\n    }\n})()\n\nexport { activityListener }\n"],"names":["eventHandling","aim","type","callback","eventOptions","passive","capture","handler","window","document","console","warn","erase","register"],"mappings":"wPAAyB,WAQrB,MAAMA,EAAgB,SAAUC,EAAKC,EAAMC,GACvC,MAAMC,EAAe,CAAEC,SAAS,EAAMC,SAAS,GACzCC,EAAU,KAAKL,IACjBK,KAAWC,OACXA,OAAOP,EAAM,iBAAiBC,EAAMC,EAAUC,GACvCG,KAAWE,SAClBA,SAASR,EAAM,iBAAiBC,EAAMC,EAAUC,GACjC,QAARH,GACPS,QAAQC,KAAK,6BAA6BT,YAsBlD,MAAO,CACHU,MALU,SAAUV,EAAMC,GAC1BH,EAAc,SAAUE,EAAMC,IAK9BU,SAfa,SAAUX,EAAMC,GAC7BH,EAAc,MAAOE,EAAMC,KA1BV"}